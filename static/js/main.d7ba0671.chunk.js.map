{"version":3,"sources":["components/Question.js","components/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answer","Object","keys","map","qAnswer","i","className","correctAnswer","clickedAnswer","onClick","checkAnswer","key","disabled","QuizMain","data","questions","1","2","3","4","5","6","7","8","9","10","answers","correctAnswers","useState","setCorrectAnswer","setClickedAnswer","step","setStep","score","setScore","start","setStart","length","date","Date","now","onComplete","window","location","reload","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7ba0671.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Question.css';\r\n\r\nfunction Question(props) {\r\n    return (\r\n        <div>\r\n            <h1>{props.question}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Question\r\n","import React from 'react';\r\nimport './Answer.css';\r\nfunction Answer(props) {\r\n    let answer = Object.keys(props.answer)\r\n    .map((qAnswer,i)=>(\r\n        <li \r\n            className ={\r\n                props.correctAnswer === qAnswer ?\r\n                'correct' : \r\n                props.clickedAnswer === qAnswer ? \r\n                'incorrect' : ''\r\n            }\r\n            onClick={() => {\r\n                props.checkAnswer(qAnswer);\r\n            }}\r\n            key={qAnswer}>\r\n                {props.answer[qAnswer]}\r\n        </li>\r\n    ))\r\n    return (\r\n        <div>\r\n            <ul disabled={props.clickedAnswer ? true : false} className=\"Answers\">\r\n                {answer}\r\n            </ul>\r\n            <div>\r\n                    {\r\n                        props.correctAnswer ?\r\n                        'Correct Answer!' : \r\n                        props.clickedAnswer ? 'Incorrect Answer!' : ''\r\n                    }\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Answer\r\n","import React,{useState} from 'react'\r\nimport './QuizMain.css';\r\nimport Question from './Question'\r\nimport Answer from './Answer'\r\nimport Countdown from 'react-countdown';\r\n\r\nfunction QuizMain() {\r\n    const data = {\r\n        questions:{\r\n            1: 'What US city is known as the \"birthplace of jazz\"?',\r\n            2: 'What is the capital of Greece?',\r\n            3: 'What planet gave birth to Superman?',\r\n            4:'What is the most common colour of toilet paper in France?',\r\n            5:'If you dug a hole through the centre of the earth starting from Wellington in New Zealand, which European country would you end up in?',\r\n            6:'Henry VIII introduced which tax in England in 1535?',\r\n            7:'What is the correct term for a question mark immediately followed by an exclamation mark?',\r\n            8:'The average person does what thirteen times a day?',\r\n            9:'Coprastastaphobia is the fear of what?',\r\n            10:'What were the first ice hockey pucks made out of?'\r\n        },\r\n        answers: {\r\n            1: {\r\n                1: 'Chicago',\r\n                2: 'New Orleans',\r\n                3: 'New York'\r\n            },\r\n            2: {\r\n                1: 'Athens',\r\n                2: 'Patras',\r\n                3: 'Kalamata'\r\n            },\r\n            3: {\r\n                1: 'Krypton',\r\n                2: 'Mars',\r\n                3: 'Saturn'\r\n            },\r\n            4: {\r\n                1: 'White',\r\n                2: 'Pink',\r\n                3: 'Blue'\r\n            },\r\n            5: {\r\n                1: 'Spain',\r\n                2: 'US',\r\n                3: 'UK'\r\n            },\r\n            6: {\r\n                1: 'A beard tax',\r\n                2: 'A shirt tax',\r\n                3: 'A hat tax'\r\n            },\r\n            7: {\r\n                1: 'Semi-colum',\r\n                2: 'Interrobang',\r\n                3: 'Colum'\r\n            },\r\n            8: {\r\n                1: 'Laughs',\r\n                2: 'Eats',\r\n                3: 'Cries'\r\n            },\r\n            9: {\r\n                1: 'Constipation',\r\n                2: 'High',\r\n                3: 'Water'\r\n            },\r\n            10: {\r\n                1: 'Knife',\r\n                2: 'Gun',\r\n                3: 'Frozen cow dung'\r\n            },\r\n\r\n        },\r\n        correctAnswers: {\r\n            1: '2',\r\n            2: '1',\r\n            3: '1',\r\n            4: '2',\r\n            5: '1',\r\n            6: '1',\r\n            7: '2',\r\n            8: '1',\r\n            9: '1',\r\n            10:'3'\r\n        },\r\n    }\r\n    const [correctAnswer,setCorrectAnswer] = useState(0);\r\n    const [clickedAnswer,setClickedAnswer] = useState(0);\r\n    const [step,setStep] = useState(1);\r\n    const [score,setScore] = useState(0);\r\n    const [start,setStart] = useState(false);\r\n\r\n    const checkAnswer = answer => {\r\n        if(answer===data.correctAnswers[step]){\r\n            setScore(score+1);\r\n            setCorrectAnswer(data.correctAnswers[step]);\r\n            setClickedAnswer(answer);\r\n        }else{\r\n            setCorrectAnswer(0);\r\n            setClickedAnswer(answer);\r\n        }\r\n    }\r\n    const nextStep = () =>{\r\n        setStep(step + 1);\r\n        setCorrectAnswer(0);\r\n        setClickedAnswer(0);\r\n    }\r\n    function refreshPage() {\r\n        window.location.reload(false);\r\n      }\r\n    const startApp = ()=>{\r\n        setStart(true);\r\n    }\r\n    const timeout=() =>{\r\n        setStep(Object.keys(data.questions).length+1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Content\">\r\n            \r\n            {\r\n            start === false ?(\r\n                <div className=\"startPage\">\r\n                    <h1>Are you ready?</h1>\r\n                    <button onClick={startApp}>Start</button>\r\n                </div>\r\n            ):\r\n\r\n            step <= Object.keys(data.questions).length && start === true ?\r\n            (<div>\r\n            <Countdown date={Date.now() + 120000} onComplete={timeout}/>\r\n            <Question\r\n                question={data.questions[step]}\r\n            />\r\n            <Answer\r\n                answer={data.answers[step]}\r\n                checkAnswer={checkAnswer}\r\n                correctAnswer={correctAnswer}\r\n                clickedAnswer={clickedAnswer}\r\n            />\r\n            <button \r\n                className=\"NextStep\"\r\n                disabled={\r\n                    clickedAnswer && Object.keys(data.questions).length >= step\r\n                    ? false : true\r\n                }\r\n                onClick={nextStep}\r\n            >\r\n                Next\r\n                </button>\r\n\r\n            </div>):\r\n            (\r\n                <div className=\"finalPage\">\r\n                            <h1>You have completed the quiz!</h1>\r\n                            <p>Your score is: {score} of {Object.keys(data.questions).length}</p>\r\n                            <p>Thank you!</p>\r\n                            <button onClick={refreshPage}>Play again!</button>\r\n                        </div>\r\n            )\r\n                \r\n            \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizMain\r\n                            \r\n    \r\n","import React from 'react';\nimport './App.css';\nimport QuizMain from \"./components/QuizMain\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuizMain/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}